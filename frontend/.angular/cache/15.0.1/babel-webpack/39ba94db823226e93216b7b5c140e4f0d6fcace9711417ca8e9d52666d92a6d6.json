{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport { User } from '../models/User';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http) {\n      this.http = http;\n      this.endpoint = 'auth';\n      const isLoggedIn = localStorage.getItem('loggedIn') === 'true';\n      this.isLoggedIn$ = new BehaviorSubject(isLoggedIn);\n    }\n    logIn(email, password) {\n      let res = this.http.post(`${environment.apiUrl}/${this.endpoint}/login`, new User(email, password));\n      if (res) {\n        localStorage.setItem('loggedIn', 'true');\n        this.isLoggedIn$.next(true);\n      }\n      return res;\n    }\n    signUp(email, password, companyName, serviceType, phoneNumber, description, logo, role) {\n      let res = this.http.post(`${environment.apiUrl}/${this.endpoint}/signup`, new User(email, password, companyName, serviceType, phoneNumber, description, logo, role));\n      if (res) {\n        localStorage.setItem('loggedIn', 'true');\n        this.isLoggedIn$.next(true);\n      }\n      return res;\n    }\n    setSession(token) {\n      localStorage.setItem('id_token', token.access_token.split(\".\")[1]);\n    }\n    logout() {\n      localStorage.removeItem(\"id_token\");\n      localStorage.setItem('loggedIn', 'false');\n      this.isLoggedIn$.next(false);\n    }\n    isLoggedIn() {\n      if (localStorage.getItem(\"id_token\") === null) {\n        return false;\n      }\n      return true;\n    }\n    isLoggedOut() {\n      return !this.isLoggedIn();\n    }\n    isUserLoggedIn(id) {\n      if (localStorage.getItem('connected') == \"false\") {\n        return false;\n      } else {\n        let idToken = localStorage.getItem('id_token');\n        let lsid = JSON.parse(window.atob(idToken)).id;\n        return lsid == id;\n      }\n    }\n  }\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}